{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","api.ts","App.tsx","index.tsx"],"names":["TodoList","memo","todos","selectedTodo","showModal","className","map","todo","id","completed","title","userId","classNames","type","onClick","TodoFilter","filterBy","setFilterBy","query","setQuery","value","onChange","event","target","placeholder","style","pointerEvents","Loader","TodoModal","selectedUser","hideModal","href","email","name","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","ok","json","reject","Error","App","useState","setTodos","setSelectedTodo","setSelectedUser","hasError","setHasError","isModalShown","setIsModalShown","loadTodos","useCallback","a","todosFromServer","useEffect","visibleTodos","filter","formattedQuery","trim","toLowerCase","matchesQuery","includes","length","getUser","userFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6c9f432b.chunk.js","sourcesContent":["import { FC, memo } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  selectedTodo: Todo | null;\n  showModal: (userId: number, todo: Todo) => void;\n}\n\nexport const TodoList: FC<Props> = memo(({\n  todos,\n  selectedTodo,\n  showModal,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => {\n        const {\n          id,\n          completed,\n          title,\n          userId,\n        } = todo;\n\n        return (\n          <tr\n            key={id}\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': selectedTodo,\n            })}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check has-text-success\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-success': completed,\n                'has-text-danger': !completed,\n              })}\n              >\n                {title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => showModal(userId, todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': !selectedTodo,\n                    'fa-eye-slash': selectedTodo,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n));\n","import { FC } from 'react';\n\ninterface Props {\n  filterBy: string;\n  setFilterBy: (filterBy: string) => void;\n  query: string;\n  setQuery: (query: string) => void;\n}\n\nexport const TodoFilter: FC<Props> = ({\n  filterBy,\n  setFilterBy,\n  query,\n  setQuery,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterBy}\n          onChange={(event) => setFilterBy(event.target.value)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {query && (\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setQuery('')}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  selectedUser: User | null;\n  selectedTodo: Todo | null;\n  hideModal: () => void;\n}\n\nexport const TodoModal: FC<Props> = ({\n  selectedUser,\n  selectedTodo,\n  hideModal,\n}) => {\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {(!selectedTodo || !selectedUser) ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={hideModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {/* <strong className=\"has-text-success\">Done</strong> */}\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${selectedUser?.email}`}>\n                {selectedUser?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => (res.ok\n      ? res.json()\n      : Promise.reject(new Error(`Can't get data from ${fullURL}`))));\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","/* eslint-disable max-len */\nimport {\n  FC,\n  useEffect,\n  useState,\n  useCallback,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos, getUser } from './api';\nimport { User } from './types/User';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [hasError, setHasError] = useState<boolean>(false);\n  const [isModalShown, setIsModalShown] = useState<boolean>(false);\n  const [filterBy, setFilterBy] = useState<string>('all');\n  const [query, setQuery] = useState<string>('');\n\n  const loadTodos = useCallback(async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n    } catch {\n      setHasError(true);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const handleShowModal = (userId: number, todo: Todo) => {\n    setIsModalShown(true);\n    getUser(userId).then(userFromServer => {\n      setSelectedUser(userFromServer);\n    });\n    setSelectedTodo(todo);\n  };\n\n  const handleHideModal = () => {\n    setIsModalShown(false);\n    setSelectedUser(null);\n    setSelectedTodo(null);\n  };\n\n  const filterTodos = todos.filter(todo => {\n    const formattedQuery = query.trim().toLowerCase();\n    const matchesQuery = todo.title.toLowerCase().includes(formattedQuery);\n\n    switch (filterBy) {\n      case 'completed':\n        return matchesQuery && todo.completed;\n\n      case 'active':\n        return matchesQuery && !todo.completed;\n\n      case 'all':\n      default:\n        return matchesQuery;\n    }\n  });\n\n  const visibleTodos = filterTodos;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterBy={filterBy}\n                setFilterBy={setFilterBy}\n                query={query}\n                setQuery={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {hasError && (\n                <p className=\"has-text-danger\">\n                  Loading error, try again\n                </p>\n              )}\n              {(todos.length > 0)\n                ? (\n                  <TodoList\n                    todos={visibleTodos}\n                    selectedTodo={selectedTodo}\n                    showModal={handleShowModal}\n                  />\n                )\n                : <Loader />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isModalShown && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          selectedUser={selectedUser}\n          hideModal={handleHideModal}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}